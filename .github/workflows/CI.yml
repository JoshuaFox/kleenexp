name: Build and upload to PyPI

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        include:
          - os: ubuntu-20.04
            sccache-path: /home/runner/.cache/sccache
            rustc-wrapper: sccache
          - os: macos-11
            sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
            rustc-wrapper: sccache
        shouldRelease:
          - ${{ startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - shouldRelease: false
            os: windows-2019
          - shouldRelease: false
            os: macos-11

    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y openssl-devel"
      CIBW_BEFORE_BUILD_LINUX: "pip3 install --upgrade keyrings.alt"
      CIBW_ARCHS_LINUX: "auto aarch64"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-*"
      CIBW_BUILD: ${{ !startsWith(github.ref, 'refs/tags/v') && "cp37-manylinux_x86_64 cp311-manylinux_x86_64" || "" }}
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: ${{ matrix.rustc-wrapper }}
      RUSTV: ${{ matrix.rust }}
      SCCACHE_CACHE_SIZE: 2G
      SCCACHE_DIR: ${{ matrix.sccache-path }}

    steps:
      - uses: actions/checkout@v3

      - name: Install sccache (ubuntu-20.04)
        if: matrix.os == 'ubuntu-20.04'
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-11)
        if: matrix.os == 'macos-11'
        run: |
          brew update
          brew install sccache
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Save sccache
        if: matrix.rustc-wrapper == 'sccache'
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ${{ matrix.sccache-path }}
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-
      - name: Start sccache server
        if: matrix.rustc-wrapper == 'sccache'
        run: sccache --start-server

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.9.0

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

      - name: Print sccache stats
        if: matrix.rustc-wrapper == 'sccache'
        run: sccache --show-stats
      - name: Stop sccache server
        if: matrix.rustc-wrapper == 'sccache'
        run: sccache --stop-server || true

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
